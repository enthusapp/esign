{"version":3,"sources":["components/Player.js","components/IncButton.js","App.js","serviceWorker.js","index.js"],"names":["Player","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","transform","textP","React","createRef","current","animate","offset","duration","iterations","Infinity","_this$props","text","backgroundColor","color","height","fontSize","react_default","a","createElement","style","overflow","position","ref","width","margin","lineHeight","textAlign","concat","Component","IncButton","prop","name","increase","decrease","buttonStyle","className","type","onClick","incButtonList","id","defaultVal","lowLimit","highLimit","reverse","App","getIncButtunList","makeState","forEach","bt","prev","setState","defineProperty","prototype","_this2","playerProps","direction","btState","IncButtonComponents","map","components_IncButton","key","components_Player","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.694b9f9a.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Player extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      transform: 'translateY(100%)',\r\n    };\r\n    this.textP = React.createRef();\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.textP.current.animate([\r\n      { transform: 'translateY(100%)' },\r\n      { transform: 'translateY(50%)', offset: 0.3 },\r\n      { transform: 'translateY(50%)', offset: 0.6 },\r\n      { transform: 'translateY(-100%)' },\r\n    ], {\r\n      duration: 10000,\r\n      iterations: Infinity,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      text,\r\n      backgroundColor,\r\n      color,\r\n      height,\r\n      fontSize,\r\n    } = this.props;\r\n\r\n    const {\r\n      transform,\r\n    } = this.state;\r\n\r\n    return (\r\n      <div style={{\r\n        backgroundColor,\r\n        color,\r\n        overflow: 'hidden',\r\n        position: 'relative',\r\n        height,\r\n      }}\r\n      >\r\n        <p\r\n          ref={this.textP}\r\n          style={{\r\n            position: 'absolute',\r\n            width: '100%',\r\n            height: '100%',\r\n            margin: '0',\r\n            lineHeight: '100%',\r\n            textAlign: 'center',\r\n            fontSize: `${fontSize}px`,\r\n            transform: `${transform}`,\r\n          }}\r\n        >\r\n          {text}\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nPlayer.propTypes = {\r\n  text: PropTypes.string.isRequired,\r\n  backgroundColor: PropTypes.string.isRequired,\r\n  color: PropTypes.string.isRequired,\r\n  height: PropTypes.string.isRequired,\r\n  fontSize: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default Player;\r\n","import React from 'react';\r\n\r\nfunction IncButton(prop) {\r\n  const {\r\n    name,\r\n    increase,\r\n    decrease,\r\n  } = prop;\r\n\r\n  const buttonStyle = {\r\n    height: '100px',\r\n    width: '100px',\r\n    margin: '10px',\r\n    fontSize: '30px',\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <p className=\"name\">{name}</p>\r\n      <button\r\n        className=\"btIncFontSize\"\r\n        type=\"button\"\r\n        onClick={increase}\r\n        style={buttonStyle}\r\n      >\r\n        {'+'}\r\n      </button>\r\n      <button\r\n        className=\"btDecFontSize\"\r\n        type=\"button\"\r\n        onClick={decrease}\r\n        style={buttonStyle}\r\n      >\r\n        {'-'}\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default IncButton;\r\n","import React, { Component } from 'react';\r\nimport Player from './components/Player';\r\nimport IncButton from './components/IncButton';\r\n\r\nconst incButtonList = [\r\n  {\r\n    id: 0,\r\n    name: 'fontSize',\r\n    defaultVal: 30,\r\n    lowLimit: 1,\r\n    highLimit: 100,\r\n    reverse: false,\r\n  },\r\n  {\r\n    id: 1,\r\n    name: 'speed',\r\n    defaultVal: 10,\r\n    lowLimit: 1,\r\n    highLimit: 100,\r\n    reverse: true,\r\n  },\r\n];\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    const makeState = {};\r\n\r\n    incButtonList.forEach((bt) => {\r\n      const {\r\n        name,\r\n        defaultVal,\r\n        lowLimit,\r\n        highLimit,\r\n        reverse,\r\n      } = bt;\r\n\r\n      makeState[name] = defaultVal;\r\n\r\n      const increase = () => {\r\n        const { [name]: prev } = this.state;\r\n        this.setState({\r\n          [name]: prev < highLimit - 1 ? prev + 1 : highLimit,\r\n        });\r\n      };\r\n\r\n      const decrease = () => {\r\n        const { [name]: prev } = this.state;\r\n        this.setState({\r\n          [name]: prev > lowLimit + 1 ? prev - 1 : lowLimit,\r\n        });\r\n      };\r\n\r\n      if (reverse) {\r\n        App.prototype[`${name}Inc`] = decrease;\r\n        App.prototype[`${name}Dec`] = increase;\r\n      } else {\r\n        App.prototype[`${name}Inc`] = increase;\r\n        App.prototype[`${name}Dec`] = decrease;\r\n      }\r\n    });\r\n\r\n    this.state = makeState;\r\n  }\r\n\r\n  getIncButtunList = () => incButtonList; // TODO: refactoring\r\n\r\n  render() {\r\n    const playerProps = {\r\n      className: 'player',\r\n      text: 'Text',\r\n      backgroundColor: 'black',\r\n      color: 'white',\r\n      height: '100px',\r\n      direction: 'scroll-up',\r\n    };\r\n\r\n    incButtonList.forEach((bt) => {\r\n      const { name } = bt;\r\n      const { [name]: btState } = this.state;\r\n      playerProps[name] = btState;\r\n    });\r\n\r\n    const IncButtonComponents = incButtonList.map(bt => (<IncButton\r\n      key={bt.id}\r\n      name={bt.name}\r\n      className={bt.name}\r\n      increase={App.prototype[`${bt.name}Inc`]}\r\n      decrease={App.prototype[`${bt.name}Dec`]}\r\n    />\r\n    ));\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <Player\r\n          {...playerProps}\r\n        />\r\n        {IncButtonComponents}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}